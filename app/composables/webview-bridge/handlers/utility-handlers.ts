import { Message } from "../../../types/message";
import { ApprovalHandler } from "../utils/approval-handler";
import { ResponseHandler } from "../utils/response-handler";

export class UtilityHandlers {
  constructor(
    private approvalHandler: ApprovalHandler,
    private responseHandler: ResponseHandler,
    private currentUrl: () => string
  ) {}

  /**
   * Â§ÑÁêÜ REGISTER_AS_REFERRER - ÈúÄË¶ÅÁî®Êà∑ÊéàÊùÉ
   */
  async handleRegisterAsReferrer(callbackId: string, data: any): Promise<void> {
    try {
      console.log("üë• Handling REGISTER_AS_REFERRER", { callbackId, data });
      const result = await this.approvalHandler.handleWalletApproval(
        Message.MessageAction.REGISTER_AS_REFERRER,
        data,
        callbackId,
        this.currentUrl()
      );
      this.responseHandler.sendResponse(callbackId, result, null);
    } catch (error) {
      console.error("‚ùå REGISTER_AS_REFERRER error:", error);
      this.responseHandler.sendResponse(callbackId, null, error as Error);
    }
  }

  /**
   * Â§ÑÁêÜ BIND_REFERRER_FOR_SERVER - ÈúÄË¶ÅÁî®Êà∑ÊéàÊùÉ
   */
  async handleBindReferrerForServer(callbackId: string, data: any): Promise<void> {
    try {
      console.log("üîó Handling BIND_REFERRER_FOR_SERVER", { callbackId, data });
      const result = await this.approvalHandler.handleWalletApproval(
        Message.MessageAction.BIND_REFERRER_FOR_SERVER,
        data,
        callbackId,
        this.currentUrl()
      );
      this.responseHandler.sendResponse(callbackId, result, null);
    } catch (error) {
      console.error("‚ùå BIND_REFERRER_FOR_SERVER error:", error);
      this.responseHandler.sendResponse(callbackId, null, error as Error);
    }
  }

  /**
   * Â§ÑÁêÜ PSBT Êìç‰ΩúÁõ∏ÂÖ≥ÁöÑÁõ¥Êé•ËØ∑Ê±Ç
   */
  async handleBuildBatchSellOrder(callbackId: string, data: any): Promise<void> {
    try {
      console.log("üì¶ Handling BUILD_BATCH_SELL_ORDER", { callbackId, data });
      const result = await this.approvalHandler.handleDirectRequest(
        Message.MessageAction.BUILD_BATCH_SELL_ORDER,
        data
      );
      this.responseHandler.sendResponse(callbackId, result, null);
    } catch (error) {
      console.error("‚ùå BUILD_BATCH_SELL_ORDER error:", error);
      this.responseHandler.sendResponse(callbackId, null, error as Error);
    }
  }

  async handleSplitBatchSignedPsbtSatsNet(callbackId: string, data: any): Promise<void> {
    try {
      console.log("‚úÇÔ∏è Handling SPLIT_BATCH_SIGNED_PSBT_SATSNET", { callbackId, data });
      const result = await this.approvalHandler.handleDirectRequest(
        Message.MessageAction.SPLIT_BATCH_SIGNED_PSBT_SATSNET,
        data
      );
      this.responseHandler.sendResponse(callbackId, result, null);
    } catch (error) {
      console.error("‚ùå SPLIT_BATCH_SIGNED_PSBT_SATSNET error:", error);
      this.responseHandler.sendResponse(callbackId, null, error as Error);
    }
  }

  async handleFinalizeSellOrder(callbackId: string, data: any): Promise<void> {
    try {
      console.log("üèÅ Handling FINALIZE_SELL_ORDER", { callbackId, data });
      const result = await this.approvalHandler.handleDirectRequest(
        Message.MessageAction.FINALIZE_SELL_ORDER,
        data
      );
      this.responseHandler.sendResponse(callbackId, result, null);
    } catch (error) {
      console.error("‚ùå FINALIZE_SELL_ORDER error:", error);
      this.responseHandler.sendResponse(callbackId, null, error as Error);
    }
  }

  async handleMergeBatchSignedPsbt(callbackId: string, data: any): Promise<void> {
    try {
      console.log("üîó Handling MERGE_BATCH_SIGNED_PSBT", { callbackId, data });
      const result = await this.approvalHandler.handleDirectRequest(
        Message.MessageAction.MERGE_BATCH_SIGNED_PSBT,
        data
      );
      this.responseHandler.sendResponse(callbackId, result, null);
    } catch (error) {
      console.error("‚ùå MERGE_BATCH_SIGNED_PSBT error:", error);
      this.responseHandler.sendResponse(callbackId, null, error as Error);
    }
  }

  async handleAddInputsToPsbt(callbackId: string, data: any): Promise<void> {
    try {
      console.log("‚ûï Handling ADD_INPUTS_TO_PSBT", { callbackId, data });
      const result = await this.approvalHandler.handleDirectRequest(
        Message.MessageAction.ADD_INPUTS_TO_PSBT,
        data
      );
      this.responseHandler.sendResponse(callbackId, result, null);
    } catch (error) {
      console.error("‚ùå ADD_INPUTS_TO_PSBT error:", error);
      this.responseHandler.sendResponse(callbackId, null, error as Error);
    }
  }

  async handleAddOutputsToPsbt(callbackId: string, data: any): Promise<void> {
    try {
      console.log("‚ûï Handling ADD_OUTPUTS_TO_PSBT", { callbackId, data });
      const result = await this.approvalHandler.handleDirectRequest(
        Message.MessageAction.ADD_OUTPUTS_TO_PSBT,
        data
      );
      this.responseHandler.sendResponse(callbackId, result, null);
    } catch (error) {
      console.error("‚ùå ADD_OUTPUTS_TO_PSBT error:", error);
      this.responseHandler.sendResponse(callbackId, null, error as Error);
    }
  }

  async handleExtractTxFromPsbt(callbackId: string, data: any): Promise<void> {
    try {
      console.log("üì§ Handling EXTRACT_TX_FROM_PSBT", { callbackId, data });
      const result = await this.approvalHandler.handleDirectRequest(
        Message.MessageAction.EXTRACT_TX_FROM_PSBT,
        data
      );
      this.responseHandler.sendResponse(callbackId, result, null);
    } catch (error) {
      console.error("‚ùå EXTRACT_TX_FROM_PSBT error:", error);
      this.responseHandler.sendResponse(callbackId, null, error as Error);
    }
  }

  async handleExtractTxFromPsbtSatsNet(callbackId: string, data: any): Promise<void> {
    try {
      console.log("üì§ Handling EXTRACT_TX_FROM_PSBT_SATSNET", { callbackId, data });
      const result = await this.approvalHandler.handleDirectRequest(
        Message.MessageAction.EXTRACT_TX_FROM_PSBT_SATSNET,
        data
      );
      this.responseHandler.sendResponse(callbackId, result, null);
    } catch (error) {
      console.error("‚ùå EXTRACT_TX_FROM_PSBT_SATSNET error:", error);
      this.responseHandler.sendResponse(callbackId, null, error as Error);
    }
  }

  /**
   * Â§ÑÁêÜÂÖ∂‰ªñÂ∑•ÂÖ∑ÊñπÊ≥ï
   */
  async handleGetCurrentName(callbackId: string, data: any): Promise<void> {
    try {
      console.log("üìù Handling GET_CURRENT_NAME", { callbackId, data });
      const result = await this.approvalHandler.handleDirectRequest(
        Message.MessageAction.GET_CURRENT_NAME,
        data
      );
      this.responseHandler.sendResponse(callbackId, result, null);
    } catch (error) {
      console.error("‚ùå GET_CURRENT_NAME error:", error);
      this.responseHandler.sendResponse(callbackId, null, error as Error);
    }
  }

  async handleGetUtxos(callbackId: string, data: any): Promise<void> {
    try {
      console.log("üîç Handling GET_UTXOS", { callbackId, data });
      const result = await this.approvalHandler.handleDirectRequest(
        Message.MessageAction.GET_UTXOS,
        data
      );
      this.responseHandler.sendResponse(callbackId, result, null);
    } catch (error) {
      console.error("‚ùå GET_UTXOS error:", error);
      this.responseHandler.sendResponse(callbackId, null, error as Error);
    }
  }

  async handleGetUtxosSatsNet(callbackId: string, data: any): Promise<void> {
    try {
      console.log("üîç Handling GET_UTXOS_SATSNET", { callbackId, data });
      const result = await this.approvalHandler.handleDirectRequest(
        Message.MessageAction.GET_UTXOS_SATSNET,
        data
      );
      this.responseHandler.sendResponse(callbackId, result, null);
    } catch (error) {
      console.error("‚ùå GET_UTXOS_SATSNET error:", error);
      this.responseHandler.sendResponse(callbackId, null, error as Error);
    }
  }
}